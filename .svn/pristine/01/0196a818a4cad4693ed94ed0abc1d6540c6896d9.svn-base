package core;

import com.google.common.base.Preconditions;
import com.google.common.base.Strings;

import ui.RefreshUICallback;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class StreamGobbler extends Thread {

	public static final String ERROR_GAME_RSC_NOT_EXIST = "游戏资源文件不存在";// 1
	public static final String ERROR_CHECKLIST_NOT_EXIST = "资源md5文件不存在";// 2
	public static final String ERROR_SIG_NOT_EXIST = "md5的摘要文件不存在";// 3
	public static final String ERROR_MD5_NOT_MATCH = "md5匹配失败";// 4

	public static final int GAME_RES_GBK_CHECK = 0;
	public static final int GAME_PLAYING_CHECK = 1;

	public static boolean GAME_SSO_REQUEST_CHECK = false;
	public static boolean GAME_FILE_CHECK = false;

	public static boolean isProcessAlive = true;

	private static final String ERROR_MSG = "error";
	private final InputStream is;

	private RefreshUICallback callback;

	private int mGameCheckMode = -1;

	/**
	 * <pre>
	 *  
	 * &#64;param is 输入流 
	 * &#64;param type 类型
	 * </pre>
	 */
	public StreamGobbler(InputStream is, int mGameCheckMode, RefreshUICallback callback) {
		super();
		this.callback = callback;
		Preconditions.checkNotNull(is, "InputStream is null.");
		this.is = is;
		this.mGameCheckMode = mGameCheckMode;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Thread#run()
	 */
	@Override
	public void run() {

		boolean isChinese = false;
		StringBuilder log = new StringBuilder();

		BufferedReader reader = new BufferedReader(new InputStreamReader(is));
		try {
			for (String line = reader.readLine(); line != null && isProcessAlive; line = reader.readLine()) {
				if (!isProcessAlive) {
					reader.close();
					System.exit(0);
					break;
				}
				// 替换游戏资源时，文件名中文检测
				if (mGameCheckMode == GAME_RES_GBK_CHECK) {
					if (isChinese(line)) {
						isChinese = true;
						log.append(line + '\n');
						callback.append("\n---------------Exception: GAME_RES_GBK_CHECK fail--------------\n", 0);
						callback.append(line, 0);
						callback.append("\n---------------Exception: End--------------\n", 0);
					} else {
						callback.append(line, 0);
					}
				} else if (mGameCheckMode == GAME_PLAYING_CHECK) {
					System.out.println(line);
					// 游戏运行时后台上报
					if (GAME_SSO_REQUEST_CHECK) {
						if (line.contains("[doCMGameReq]")) {
							String[] arr = line.split(",");
							callback.append("sso request:" + arr[1], 1);
						}
						if (line.contains("ret")) {
							String[] arr = line.split(",");
							callback.append("→ " + arr[0], 1);
						}
					}
					// 游戏运行时文件调用检测
					if (GAME_FILE_CHECK) {
						if (line.contains("failType")) {
							String error = "";
							if (line.contains("failType:1"))
								error += ERROR_GAME_RSC_NOT_EXIST;
							else if (line.contains("failType:2"))
								error += ERROR_CHECKLIST_NOT_EXIST;
							else if (line.contains("failType:3"))
								error += ERROR_SIG_NOT_EXIST;
							else if (line.contains("failType:4"))
								error += ERROR_MD5_NOT_MATCH;

							callback.append("\n---------------Exception: GAME_FILE_CHECK fail--------------\n", 1);
							callback.append(error + ":" + line, 1);
							callback.append("\n---------------Exception: End--------------\n", 1);
						}
					}
				} else {
					callback.append(line, 0);
				}
			}
		} catch (IOException e) {
			callback.append("-------IOException !" + e.toString(), -1);
		} finally {
			if (isChinese) {
				callback.append('\n' + "---------------Exception:has GBK string--------------", 0);
				callback.append('\n' + log.toString(), -1);
			}
			callback.append("\n", 0);
			try {
				reader.close();
				is.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		}

	}

	private boolean isChinese(String str) {
		Pattern p = Pattern.compile("[\u4e00-\u9fa5]");
		Matcher m = p.matcher(str);
		if (m.find()) {
			return true;
		}
		return false;
	}

}